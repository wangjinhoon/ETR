using UnityEngine;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System;
using System.Security.Cryptography;
using System.Collections.Specialized;
using System.IO;
using Unity.VisualScripting;
using UnityEditor.Profiling.Memory.Experimental;
using Unity.Jobs;

public class RobotVisualizer : MonoBehaviour
{
    TcpClient client;
    Thread receiveThread;
    string serverIp = "127.0.0.1";
    int serverPort = 8888;

    Vector3 targetPosition;
    Vector3 targetRotation;

    float Roll_;
    float Roll_2;
    float Pitch_;
    float Yaw_;
    float bRoll_ = 0.0f;
    float bPitch_ = 0.0f;
    float bYaw_ = 0.0f;
    bool positionUpdated = false;

    // 텍스트 파일 경로
    static string filePath = "C:\\Users\\cam_initi_data.txt";

    // 텍스트 파일 읽어오기
    static string content = ReadTextFile(filePath);


    static string[] elements = content.Trim().Split();

    //static float x_ = (float.Parse(elements[0]));
    //static float y_ = (float.Parse(elements[1]));
    //static float z_ = (float.Parse(elements[2]));
    int flag = 2;
    bool flag2 = true;

    void Start()
    {
        client = new TcpClient(serverIp, serverPort);
        receiveThread = new Thread(new ThreadStart(ReceiveData));
        receiveThread.IsBackground = true;
        receiveThread.Start();
        print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    }
    //        bRoll_ = Roll_;
    //        bPitch_ = Pitch_;
    //        bYaw_ = Yaw_;
    //        positionUpdated = false;

    void Update()
    {
        {
            if (positionUpdated) { transform.rotation = Quaternion.Euler(Pitch_, Yaw_, Roll_); positionUpdated = false; }
            //if (positionUpdated)
            //{
            //    if (Mathf.Abs(bRoll_ - Roll_) > 150 && flag == 2)
            //    {
            //        print("bRoll_1 : " + (bRoll_));
            //        print("Roll_1 : " + (Roll_));
            //        print("flag = 1 and bRoll_ - Roll_ : " + (bRoll_ - Roll_));
            //        flag = 1;//바꾸기

            //    }
            //    else if (Mathf.Abs(bRoll_ - Roll_) > 150 && flag == 1)
            //    {
            //        print("bRoll_2 : " + (bRoll_));
            //        print("Roll_2 : " + (Roll_));
            //        print("flag = 2 and bRoll_ - Roll_ : " + (bRoll_ - Roll_));
            //        flag = 2;//그대로

            //    }

            //    if (flag == 1)
            //    {

            //        Roll_2 = Roll_ + 180;
            //        //bPitch_ 150
            //        //Pitch_ 30

            //        if (Pitch_ > 0)
            //        {
            //            Pitch_ = 180 - Pitch_;
            //        }
            //        else if (Pitch_ < 0)
            //        {
            //            Pitch_ = -180 - Pitch_;
            //        }
            //        //bYaw_: 150                           bYaw : -30
            //        //Yaw: 151 + 180 --> -29               Yaw : - 31 + 180  -> 149
            //        //Yaw_ = Yaw_ - 180;
            //        if (Yaw_ > 0)
            //        {
            //            Yaw_ = Yaw_ - 180;
            //        }
            //        else if (Yaw_ < 0)
            //        {
            //            Yaw_ = Yaw_ + 180;
            //        }


            //        print("flag = 1 : Rotate");
            //        print("Roll_2 : " + Roll_2);
            //        transform.position = targetPosition;
            //        Quaternion currentRotation = transform.rotation;
            //        //transform.eulerAngles = targetRotation;
            //        transform.eulerAngles = new Vector3(0, 0, 0);


            //        Matrix4x4 obrotationMatrix = Matrix4x4.Rotate(currentRotation);
            //        print(" before_Pitch_ : " + Pitch_ + " before_Yaw_ : " + Yaw_ + " before_Roll_1 : " + -Roll_2);
            //        Quaternion rotationQuaternion = Quaternion.Euler(Pitch_, Yaw_, -Roll_2);
            //        Matrix4x4 rotationMatrix = Matrix4x4.Rotate(rotationQuaternion);

            //        Matrix4x4 resultMatrix = obrotationMatrix * rotationMatrix;

            //        Quaternion rotationQuaternion2 = resultMatrix.rotation;

            //        // Quaternion을 Euler 각도로 변환
            //        Vector3 eulerAngles = rotationQuaternion2.eulerAngles;



            //        print(" after_Pitch_ : " + eulerAngles.x + " after_Yaw_ : " + eulerAngles.y + " after_Roll_1 : " + eulerAngles.z);

            //        //transform.Rotate(0.0f, eulerAngles.y, 0.0f, Space.World);

            //        //transform.Rotate(eulerAngles.x, 0.0f, 0.0f, Space.Self);

            //        //transform.Rotate(0.0f, 0.0f, eulerAngles.z, Space.Self);

            //        transform.Rotate(0.0f, Yaw_, 0.0f, Space.World);

            //        transform.Rotate(Pitch_, 0.0f, 0.0f, Space.Self);

            //        transform.Rotate(0.0f, 0.0f, -Roll_2, Space.Self);


            //        bRoll_ = Roll_2 - 180;
            //        bPitch_ = Pitch_;
            //        bYaw_ = Yaw_;
            //        positionUpdated = false;
            //    }
            //    else
            //    {
            //        print("flag = 2 : Rotate");
            //        transform.position = targetPosition;
            //        // transform.eulerAngles = targetRotation;
            //        Quaternion currentRotation = transform.rotation;
            //        transform.eulerAngles = new Vector3(0, 0, 0);
            //        Matrix4x4 obrotationMatrix = Matrix4x4.Rotate(currentRotation);


            //        print(" before_Pitch_ : " + Pitch_ + " before_Yaw_ : " + Yaw_ + " before_Roll_2 : " + -Roll_);
            //        Quaternion rotationQuaternion = Quaternion.Euler(Pitch_, Yaw_, -Roll_);
            //        Matrix4x4 rotationMatrix = Matrix4x4.Rotate(rotationQuaternion);
            //        print(obrotationMatrix);
            //        Matrix4x4 resultMatrix = obrotationMatrix * rotationMatrix;

            //        Quaternion rotationQuaternion2 = resultMatrix.rotation;
            //        // Quaternion을 Euler 각도로 변환
            //        Vector3 eulerAngles = rotationQuaternion2.eulerAngles;

            //        print(" after_Pitch_ : " + eulerAngles.x + " after_Yaw_ : " + eulerAngles.y + " after_Roll_2 : " + eulerAngles.z);

            //        //transform.Rotate(0.0f, eulerAngles.y, 0.0f, Space.World);

            //        //transform.Rotate(eulerAngles.x, 0.0f, 0.0f, Space.Self);

            //        //transform.Rotate(0.0f, 0.0f, eulerAngles.z, Space.Self);


            //        transform.Rotate(0.0f, Yaw_, 0.0f, Space.World);

            //        transform.Rotate(Pitch_, 0.0f, 0.0f, Space.Self);

            //        transform.Rotate(0.0f, 0.0f, -Roll_, Space.Self);


            //        bRoll_ = Roll_;
            //        bPitch_ = Pitch_;
            //        bYaw_ = Yaw_;
            //        positionUpdated = false;
            //    }
            //}
            //else
            //{
            //    transform.Rotate(0.0f, 0.0f, 0.0f, Space.World);
            //    transform.Rotate(0.0f, 0.0f, 0.0f, Space.Self);
            //    transform.Rotate(0.0f, 0.0f, 0.0f, Space.Self);


        }
    }

    void ReceiveData()
    {
        NetworkStream stream = client.GetStream();
        byte[] data = new byte[1024];

        while (true)
        {
            int bytesReceived = stream.Read(data, 0, data.Length);
            string message = Encoding.ASCII.GetString(data, 0, bytesReceived);
            ParseData(message);
            Thread.Sleep(100);
        }
    }

    void ParseData(string data)
    {
        string[] values = data.Split(',');
        Vector3 position = new Vector3(
            -Convert.ToSingle(values[0]) + 0,
            Convert.ToSingle(values[1]) + 0,
            Convert.ToSingle(values[2]) + 0);

        //Vector3 rotation = new Vector3(
        //    Convert.ToSingle(values[4]),
        //    -Convert.ToSingle(values[5]),
        //    -Convert.ToSingle(values[3]));
        Roll_ = Convert.ToSingle(values[3]);
        Pitch_ = Convert.ToSingle(values[4]);
        Yaw_ = -Convert.ToSingle(values[5]);


        targetPosition = position;
        //targetRotation = rotation;

        positionUpdated = true;
    }

    void OnApplicationQuit()
    {
        if (receiveThread != null)
            receiveThread.Abort();
        if (client != null)
            client.Close();
    }

    static string ReadTextFile(string filePath)
    {
        try
        {
            // 파일의 모든 텍스트를 읽어옴
            string content = File.ReadAllText(filePath);
            return content;
        }
        catch (Exception ex)
        {
            // 예외 발생 시 처리
            Console.WriteLine($"파일 읽기 오류: {ex.Message}");
            return string.Empty;
        }
    }

}




//using UnityEngine;
//using System.Net.Sockets;
//using System.Text;
//using System.Threading;
//using System;
//using System.Security.Cryptography;
//using System.Collections.Specialized;
//using System.IO;
//using Unity.VisualScripting;
//using UnityEditor.Profiling.Memory.Experimental;
//using Unity.Jobs;

//public class RobotVisualizer : MonoBehaviour
//{
//    TcpClient client;
//    Thread receiveThread;
//    string serverIp = "127.0.0.1";
//    int serverPort = 8888;

//    Vector3 targetPosition;
//    Vector3 targetRotation;

//    float Roll_;
//    float Roll_2;
//    float Pitch_;
//    float Yaw_;
//    float bRoll_ = 0.0f;
//    float bPitch_ = 0.0f;
//    float bYaw_ = 0.0f;
//    bool positionUpdated = false;

//    // 텍스트 파일 경로
//    static string filePath = "C:\\Users\\cam_initi_data.txt";

//    // 텍스트 파일 읽어오기
//    static string content = ReadTextFile(filePath);


//    static string[] elements = content.Trim().Split();

//    //static float x_ = (float.Parse(elements[0]));
//    //static float y_ = (float.Parse(elements[1]));
//    //static float z_ = (float.Parse(elements[2]));
//    int flag = 2;
//    bool flag2 = true;

//    void Start()
//    {
//        client = new TcpClient(serverIp, serverPort);
//        receiveThread = new Thread(new ThreadStart(ReceiveData));
//        receiveThread.IsBackground = true;
//        receiveThread.Start();
//        print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
//    }
//    //        bRoll_ = Roll_;
//    //        bPitch_ = Pitch_;
//    //        bYaw_ = Yaw_;
//    //        positionUpdated = false;

//    void Update()
//    {

//        if (positionUpdated)
//        {
//            if (Mathf.Abs(bRoll_ - Roll_) > 150 && flag == 2)
//            {

//                print("flag = 1 and bRoll_ - Roll_ : " + (bRoll_ - Roll_));
//                flag = 1;//바꾸기

//            }
//            else if (Mathf.Abs(bRoll_ - Roll_) > 150 && flag == 1)
//            {
//                print("flag = 2 and bRoll_ - Roll_ : " + (bRoll_ - Roll_));
//                flag = 2;//그대로

//            }

//            if (flag == 1)
//            {

//                //Roll_2 = Roll_ + 180;
//                ////bPitch_ 150
//                ////Pitch_ 30

//                //if (Pitch_ > 0)
//                //{
//                //    Pitch_ = 180 - Pitch_;
//                //}
//                //else if (Pitch_ < 0)
//                //{
//                //    Pitch_ = -180 - Pitch_;
//                //}
//                ////bYaw_: 150                           bYaw : -30
//                ////Yaw: 151 + 180 --> -29               Yaw : - 31 + 180  -> 149
//                ////Yaw_ = Yaw_ - 180;
//                //if (Yaw_ > 0)
//                //{
//                //    Yaw_ = Yaw_ - 180;
//                //}
//                //else if (Yaw_ < 0)
//                //{
//                //    Yaw_ = Yaw_ + 180;
//                //}


//                print("flag = 1 : Rotate");
//                print("Roll_2 : " + Roll_2);
//                transform.position = targetPosition;

//                print(" Pitch_ : " + Pitch_ + " Yaw_ : " + Yaw_ + " Roll_2 : " + -Roll_2);
//                transform.rotation = Quaternion.Euler(Pitch_, Yaw_, -Roll_2);



//                //bRoll_ = Roll_2 - 180;
//                //bPitch_ = Pitch_;
//                //bYaw_ = Yaw_;
//                positionUpdated = false;
//            }
//            else
//            {

//                print("flag = 2 : Rotate");
//                transform.position = targetPosition;
//                //transform.eulerAngles = targetRotation;
//                transform.rotation = Quaternion.Euler(Pitch_, Yaw_, Roll_);

//                print(" Pitch_ : " + Pitch_ + " Yaw_ : " + Yaw_ + " Roll_ : " + -Roll_);



//                //bRoll_ = Roll_;
//                //bPitch_ = Pitch_;
//                //bYaw_ = Yaw_;
//                positionUpdated = false;
//            }
//        }
//        else
//        {
//            //transform.Rotate(0.0f, 0.0f, 0.0f, Space.World);
//            //transform.Rotate(0.0f, 0.0f, 0.0f, Space.World);
//            //transform.Rotate(0.0f, 0.0f, 0.0f, Space.World);

//        }
//    }

//    void ReceiveData()
//    {
//        NetworkStream stream = client.GetStream();
//        byte[] data = new byte[1024];

//        while (true)
//        {
//            int bytesReceived = stream.Read(data, 0, data.Length);
//            string message = Encoding.ASCII.GetString(data, 0, bytesReceived);
//            ParseData(message);
//            Thread.Sleep(100);
//        }
//    }

//    void ParseData(string data)
//    {
//        string[] values = data.Split(',');
//        Vector3 position = new Vector3(
//            -Convert.ToSingle(values[0]) + 0,
//            Convert.ToSingle(values[1]) + 0,
//            Convert.ToSingle(values[2]) + 0);

//        //Vector3 rotation = new Vector3(
//        //    Convert.ToSingle(values[4]),
//        //    -Convert.ToSingle(values[5]),
//        //    -Convert.ToSingle(values[3]));
//        Roll_ = Convert.ToSingle(values[3]);
//        Pitch_ = Convert.ToSingle(values[4]);
//        Yaw_ = -Convert.ToSingle(values[5]);


//        targetPosition = position;
//        //targetRotation = rotation;

//        positionUpdated = true;
//    }

//    void OnApplicationQuit()
//    {
//        if (receiveThread != null)
//            receiveThread.Abort();
//        if (client != null)
//            client.Close();
//    }

//    static string ReadTextFile(string filePath)
//    {
//        try
//        {
//            // 파일의 모든 텍스트를 읽어옴
//            string content = File.ReadAllText(filePath);
//            return content;
//        }
//        catch (Exception ex)
//        {
//            // 예외 발생 시 처리
//            Console.WriteLine($"파일 읽기 오류: {ex.Message}");
//            return string.Empty;
//        }
//    }

//}



