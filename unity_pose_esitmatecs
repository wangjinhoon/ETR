using UnityEngine;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System;
using System.Security.Cryptography;
using System.Collections.Specialized;
using System.IO;
using Unity.VisualScripting;
using UnityEditor.Profiling.Memory.Experimental;
using Unity.Jobs;

public class RobotVisualizer : MonoBehaviour
{
    TcpClient client;
    Thread receiveThread;
    string serverIp = "127.0.0.1";
    int serverPort = 8888;

    Vector3 targetPosition;
    Vector3 targetRotation;

    float Roll_;
    float Roll_2;
    float Pitch_;
    float Yaw_;
    float bRoll_ = 0.0f;
    float bPitch_ = 0.0f;
    float bYaw_ = 0.0f;
    bool positionUpdated = false;

    // 텍스트 파일 경로
    static string filePath = "C:\\Users\\cam_initi_data.txt";

    // 텍스트 파일 읽어오기
    static string content = ReadTextFile(filePath);


    static string[] elements = content.Trim().Split();

    //static float x_ = (float.Parse(elements[0]));
    //static float y_ = (float.Parse(elements[1]));
    //static float z_ = (float.Parse(elements[2]));
    int flag = 2;
    bool flag2 = true;

    void Start()
    {
        client = new TcpClient(serverIp, serverPort);
        receiveThread = new Thread(new ThreadStart(ReceiveData));
        receiveThread.IsBackground = true;
        receiveThread.Start();
        print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    }

    void Update()
    {
        if (positionUpdated)
        {
            transform.position = targetPosition;
            transform.rotation = DeviceWorldRotation_to_UnityWorldRotation_v2(Roll_, Pitch_, Yaw_);

            positionUpdated = false;
        }
    }

    public Quaternion DeviceWorldRotation_to_UnityWorldRotation_v2(float roll, float pitch, float yaw)
    {
        return
            Quaternion.Euler(0, 0, -roll) *
            Quaternion.Euler(pitch, 0, 0) *
            Quaternion.Euler(0, -yaw, 0);
    }

    void ReceiveData()
    {
        NetworkStream stream = client.GetStream();
        byte[] data = new byte[1024];

        while (true)
        {
            int bytesReceived = stream.Read(data, 0, data.Length);
            string message = Encoding.ASCII.GetString(data, 0, bytesReceived);
            ParseData(message);
            Thread.Sleep(100);
        }
    }

    void ParseData(string data)
    {
        string[] values = data.Split(',');
        Vector3 position = new Vector3(
            -Convert.ToSingle(values[0]) + 0,
            Convert.ToSingle(values[1]) + 0,
            Convert.ToSingle(values[2]) + 0);

        Roll_ = Convert.ToSingle(values[3]);
        Pitch_ = Convert.ToSingle(values[4]);
        Yaw_ = Convert.ToSingle(values[5]);


        targetPosition = position;
        //targetRotation = rotation;

        positionUpdated = true;
    }

    void OnApplicationQuit()
    {
        if (receiveThread != null)
            receiveThread.Abort();
        if (client != null)
            client.Close();
    }

    static string ReadTextFile(string filePath)
    {
        try
        {
            // 파일의 모든 텍스트를 읽어옴
            string content = File.ReadAllText(filePath);
            return content;
        }
        catch (Exception ex)
        {
            // 예외 발생 시 처리
            Console.WriteLine($"파일 읽기 오류: {ex.Message}");
            return string.Empty;
        }
    }

}
